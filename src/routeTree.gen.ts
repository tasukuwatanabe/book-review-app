/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as BooksNewImport } from './routes/books.new'
import { Route as BooksBookIdImport } from './routes/books.$bookId'
import { Route as BooksBookIdEditImport } from './routes/books_.$bookId.edit'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const BooksNewRoute = BooksNewImport.update({
  id: '/books/new',
  path: '/books/new',
  getParentRoute: () => rootRoute,
} as any)

const BooksBookIdRoute = BooksBookIdImport.update({
  id: '/books/$bookId',
  path: '/books/$bookId',
  getParentRoute: () => rootRoute,
} as any)

const BooksBookIdEditRoute = BooksBookIdEditImport.update({
  id: '/books_/$bookId/edit',
  path: '/books/$bookId/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/books/$bookId': {
      id: '/books/$bookId'
      path: '/books/$bookId'
      fullPath: '/books/$bookId'
      preLoaderRoute: typeof BooksBookIdImport
      parentRoute: typeof rootRoute
    }
    '/books/new': {
      id: '/books/new'
      path: '/books/new'
      fullPath: '/books/new'
      preLoaderRoute: typeof BooksNewImport
      parentRoute: typeof rootRoute
    }
    '/books_/$bookId/edit': {
      id: '/books_/$bookId/edit'
      path: '/books/$bookId/edit'
      fullPath: '/books/$bookId/edit'
      preLoaderRoute: typeof BooksBookIdEditImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/books/$bookId': typeof BooksBookIdRoute
  '/books/new': typeof BooksNewRoute
  '/books/$bookId/edit': typeof BooksBookIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/books/$bookId': typeof BooksBookIdRoute
  '/books/new': typeof BooksNewRoute
  '/books/$bookId/edit': typeof BooksBookIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/books/$bookId': typeof BooksBookIdRoute
  '/books/new': typeof BooksNewRoute
  '/books_/$bookId/edit': typeof BooksBookIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/books/$bookId' | '/books/new' | '/books/$bookId/edit'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/books/$bookId' | '/books/new' | '/books/$bookId/edit'
  id:
    | '__root__'
    | '/'
    | '/books/$bookId'
    | '/books/new'
    | '/books_/$bookId/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BooksBookIdRoute: typeof BooksBookIdRoute
  BooksNewRoute: typeof BooksNewRoute
  BooksBookIdEditRoute: typeof BooksBookIdEditRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BooksBookIdRoute: BooksBookIdRoute,
  BooksNewRoute: BooksNewRoute,
  BooksBookIdEditRoute: BooksBookIdEditRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/books/$bookId",
        "/books/new",
        "/books_/$bookId/edit"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/books/$bookId": {
      "filePath": "books.$bookId.tsx"
    },
    "/books/new": {
      "filePath": "books.new.tsx"
    },
    "/books_/$bookId/edit": {
      "filePath": "books_.$bookId.edit.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
